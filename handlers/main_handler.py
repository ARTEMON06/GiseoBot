from aiogram import types
from aiogram.dispatcher import FSMContext
from tools.PyGiseo import Parse
from tools import DbTools
from loader import dp, bot
from states import Menu
from .keyboards import *
import datetime
from handlers import start_handler


# –ø–µ—á–∞—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query_handler(state=Menu.main_menu)
async def main_menu(call: types.CallbackQuery, mode=False):

    if call.data == 'start' or mode:
        if not mode:
            await call.message.delete()
        await DbTools.send_photo(call, 'main_page.png', mode=2,
                                 caption=f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.message.chat.username}',
                                 reply_markup=main_menu_keyboard)
        await Menu.func.set()
    else:
        await DbTools.send_photo(call, 'main_page.png')
        await call.message.edit_caption(caption=f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.message.chat.username}',
                                        reply_markup=main_menu_keyboard)
        await Menu.func.set()


# –º–µ–Ω—é –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
@dp.callback_query_handler(state=Menu.func)
async def functions(call: types.CallbackQuery):
    if call.data == 'back':
        await main_menu(call)

    if call.data == 'homework_t':
        day = datetime.datetime.today().weekday() + 1
        next_day = datetime.date.today() + datetime.timedelta(days=1)
        next_day = next_day.strftime('%d.%m.%y')
        if day == 7: day = 1
        homework = DbTools.get_homework_text(call.message.chat.id, day)
        if homework:
            await DbTools.send_photo(call, f'homework.png')
            await call.message.edit_caption(f'–í–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–Ω–∏–µ –Ω–∞ <b>{name_of_day(day)}, {next_day}</b>\n\n'
                                            f'{homework}',
                                            reply_markup=homework_back_t_keyboard, parse_mode='html')
        else:
            await call.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ!')

    if call.data == 'homework_n':
        day = datetime.datetime.today().weekday()
        today = datetime.date.today()
        today = today.strftime('%d.%m.%y')
        if day == 6: day = 0
        homework = DbTools.get_homework_text(call.message.chat.id, day)
        duty = DbTools.get_duty_text(call.message.chat.id)
        if homework:
            await DbTools.send_photo(call, f'homework.png')
            await call.message.edit_caption(f'–í–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ <b>{name_of_day(day)}, {today}</b>\n\n'
                                            f'{homework}\n<b>–í–∞—à–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n\n{duty}',
                                            reply_markup=homework_back_n_keyboard, parse_mode='html')
        else:
            await call.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ!')

    if call.data == 'next':
        day = datetime.datetime.today().weekday() + 1
        next_day = datetime.date.today() + datetime.timedelta(days=1)
        next_day = next_day.strftime('%d.%m.%y')
        if day == 7: day = 1
        if await DbTools.send_photo(call, f'parse_schedule_{day}.png'):
            await call.message.edit_caption(f'–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ <b>{name_of_day(day)}, '
                                            f'{next_day}</b>',
                                            reply_markup=today_keyboard, parse_mode='html')

    if call.data == 'schedule':
        day = datetime.datetime.today().weekday()
        today = datetime.date.today()
        today = today.strftime('%d.%m.%y')
        if day == 6: day = 0
        if await DbTools.send_photo(call, f'parse_schedule_{day}.png'):
            await call.message.edit_caption(f'–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ <b>{name_of_day(day)}, {today}'
                                            f'</b>', reply_markup=next_keyboard, parse_mode='html')

    if call.data == 'year':
        if await DbTools.send_photo(call, 'parse_middle_marks_year.png'):
            await call.message.edit_caption('–í–∞—à–∏ —Å—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º –∑–∞ –≥–æ–¥', reply_markup=back_keyboard)

    if call.data == 'quarter':
        await menu_quarter(call)

    if call.data == 'final':
        if await DbTools.send_photo(call, 'parse_final_marks.png'):
            await call.message.edit_caption('–í–∞—à–∏ –∏—Ç–æ–≥–æ–≤—ã–µ –æ—Ç–º–µ—Ç–∫–∏', reply_markup=back_keyboard)

    if call.data == 'update':
        await update(call)

    if call.data == 'info':
        await menu_info(call)

    if call.data == 'account':
        await account_menu(call)


def name_of_day(day):
    if day == 0: return '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
    if day == 1: return '–≤—Ç–æ—Ä–Ω–∏–∫'
    if day == 2: return '—Å—Ä–µ–¥—É'
    if day == 3: return '—á–µ—Ç–≤–µ—Ä–≥'
    if day == 4: return '–ø—è—Ç–Ω–∏—Ü—É'
    if day == 5: return '—Å—É–±–±–æ—Ç—É'


async def menu_info(call: types.CallbackQuery):
    await DbTools.send_photo(call, 'info.png')
    await call.message.edit_caption('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é ‚¨á', reply_markup=info_keyboard)
    await Menu.info_menu.set()


@dp.callback_query_handler(state=Menu.info_menu)
async def func_info(call: types.CallbackQuery):
    if call.data == 'back_info':
        await main_menu(call)
    if call.data == 'back':
        await menu_info(call)
    if call.data == 'support':
        await DbTools.send_photo(call, 'support.png')
        await call.message.edit_caption('–ü–æ <a href="https://my.qiwi.com/Artem-S89vlnLKHq">—ç—Ç–æ–π —Å—Å—ã–ª–∫–µ</a> '
                                        '–º–æ–∂–Ω–æ –ø–æ–¥–¥—Ä–µ–∂–∞—Ç—å –Ω–∞—à –ø—Ä–æ–µ–∫—Ç! –°–ø–∞—Å–∏–±–æ!',
                                        reply_markup=back_keyboard, parse_mode='html')
    if call.data == 'over':
        await DbTools.send_photo(call, 'over.png')
        await call.message.edit_caption('–î—Ä—É–≥–∏–µ –Ω–∞—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –Ω–∞ '
                                        '<a href="https://github.com/Genius-Team-DA?tab=repositories">'
                                        '—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –≥–∏—Ç—Ö–∞–±</a>',
                                        reply_markup=back_keyboard, parse_mode='html')
    if call.data == 'connect':
        await DbTools.send_photo(call, 'connect.png')
        await call.message.edit_caption('–ù–∞—à–∞ –ø–æ—á—Ç–∞: geniusteam@internet.ru', reply_markup=back_keyboard)


async def update(call: types.CallbackQuery):
    await call.message.delete()
    mes1 = await call.message.answer('üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üì•\n')
    res = DbTools.update_data(call.message.chat.id)
    if res != 'error':
        mes2 = await call.message.answer('‚úî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! ‚úî')
    else:
        mes2 = await call.message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ ‚ùå\n–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...')
    await bot.delete_message(call.message.chat.id, mes1.message_id)
    await bot.delete_message(call.message.chat.id, mes2.message_id)
    await main_menu(call, mode=True)


async def menu_quarter(call: types.CallbackQuery):
    await DbTools.send_photo(call, 'select_quarter.png')
    await call.message.edit_caption('–í—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ç–≤–µ—Ä—Ç—å ‚¨á', reply_markup=quarter_select_keyboard)
    await Menu.quarter_select.set()


async def account_menu(call):
    data = DbTools.get_user_data(call.message.chat.id)
    name = data[1]
    school = data[6]
    theme = data[7]

    if theme == 'theme_1':
        theme = '—Å–≤–µ—Ç–ª–∞—è'
    elif theme == 'theme_2':
        theme = '—Ç–µ–º–Ω–∞—è'
    elif theme == 'theme_3':
        theme = '–∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è'

    await DbTools.send_photo(call, 'account_menu.png')
    await call.message.edit_caption(f'–°–≤–µ–¥–µ–Ω–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:\n\n'
                                    f'<b>–õ–æ–≥–∏–Ω: </b>{name}\n'
                                    f'<b>–û–û: </b>{school}\n'
                                    f'<b>–¢–µ–º–∞ –±–æ—Ç–∞: </b>{theme}', reply_markup=account_keyboard, parse_mode='html')

    await Menu.account_menu.set()


# –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —á–µ—Ç–≤–µ—Ä—Ç–∏ –∏ –ø–æ—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ
@dp.callback_query_handler(state=Menu.quarter_select)
async def func_quarter(call: types.CallbackQuery):

    if call.data == 'select_quarter_1':
        if await DbTools.send_photo(call, 'parse_middle_marks_period_1.png'):
            await call.message.edit_caption('–ë–∞–ª–ª—ã <b>1 —á–µ—Ç–≤–µ—Ä—Ç—å</b>', reply_markup=back_keyboard, parse_mode='html')

    elif call.data == 'select_quarter_2':
        if await DbTools.send_photo(call, 'parse_middle_marks_period_2.png'):
            await call.message.edit_caption('–ë–∞–ª–ª—ã <b>2 —á–µ—Ç–≤–µ—Ä—Ç—å</b>', reply_markup=back_keyboard, parse_mode='html')

    elif call.data == 'select_quarter_3':
        if await DbTools.send_photo(call, 'parse_middle_marks_period_3.png'):
            await call.message.edit_caption('–ë–∞–ª–ª—ã <b>3 —á–µ—Ç–≤–µ—Ä—Ç—å</b>', reply_markup=back_keyboard, parse_mode='html')

    elif call.data == 'select_quarter_4':
        if await DbTools.send_photo(call, 'parse_middle_marks_period_4.png'):
            await call.message.edit_caption('–ë–∞–ª–ª—ã <b>4 —á–µ—Ç–≤–µ—Ä—Ç—å</b>', reply_markup=back_keyboard, parse_mode='html')

    if call.data == 'back':
        await menu_quarter(call)

    if call.data == 'back_selected':
        await main_menu(call)


# –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞
@dp.callback_query_handler(state=Menu.account_menu)
async def func_account_menu(call: types.CallbackQuery):
    if call.data == 'logout':
        await DbTools.send_photo(call, 'confirm.png')
        await call.message.edit_caption('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?', reply_markup=logout_confirm_keyboard)
        await Menu.logout_confirm.set()
    elif call.data == 'change_theme':
        await DbTools.send_photo(call, 'theme_change_variants.png')
        await call.message.edit_caption('', reply_markup=change_theme_keyboard)
        await Menu.theme_change.set()
    elif call.data == 'vip':
        await call.answer('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, —Ç–µ—Ä–ø–µ–Ω–∏–µ...')
    if call.data == 'back':
        await main_menu(call)


@dp.callback_query_handler(state=Menu.theme_change)
async def func_change_theme(call: types.CallbackQuery):
    data = DbTools.get_user_data(chat_id=call.message.chat.id)
    theme_now = data[7]

    if theme_now == call.data:
        await call.answer('–¢–µ–º–∞ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
        await account_menu(call)

    elif call.data == 'back':
        await account_menu(call)

    else:
        await changing_theme(call, call.data)


async def changing_theme(call, theme):
    await call.message.delete()
    mes1 = await call.message.answer('üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üì•\n')
    res = DbTools.change_theme(call.message.chat.id, theme)
    if res == 'error':
        mes2 = await call.message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–µ–º—ã ‚ùå\n–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...')
    else:
        print('ok')
        mes2 = await call.message.answer('‚úî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! ‚úî')
    await bot.delete_message(call.message.chat.id, mes1.message_id)
    await bot.delete_message(call.message.chat.id, mes2.message_id)
    await main_menu(call, mode=True)


# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞
@dp.callback_query_handler(state=Menu.logout_confirm)
async def func_confirm_logout(call: types.CallbackQuery):
    if call.data == 'yes':
        DbTools.logout_user(call.message.chat.id)
        await call.message.delete()
        await call.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞!')
        await start_handler.start(call.message)
    elif call.data == 'no':
        await account_menu(call)
